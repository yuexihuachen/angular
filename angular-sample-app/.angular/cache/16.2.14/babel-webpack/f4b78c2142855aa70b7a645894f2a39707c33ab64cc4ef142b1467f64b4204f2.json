{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport class HeroService {\n  constructor(http) {\n    this.http = http;\n    this.heroesUrl = 'api/heroes'; // URL to web api\n  }\n  /** GET heroes from the server */\n  getHeroes() {\n    return this.http.get(this.heroesUrl).pipe(tap(heroes => this.log('fetched heroes')), catchError(this.handleError('getHeroes')));\n  }\n  /** GET hero by id. Return `undefined` when id not found */\n  getHero(id) {\n    if (typeof id === 'string') {\n      id = parseInt(id, 10);\n    }\n    const url = `${this.heroesUrl}/?id=${id}`;\n    return this.http.get(url).pipe(map(heroes => heroes[0]),\n    // returns a {0|1} element array\n    tap(h => {\n      const outcome = h ? 'fetched' : 'did not find';\n      this.log(`${outcome} hero id=${id}`);\n    }), catchError(this.handleError(`getHero id=${id}`)));\n  }\n  //////// Save methods //////////\n  /** POST: add a new hero to the server */\n  addHero(hero) {\n    return this.http.post(this.heroesUrl, hero, httpOptions).pipe(tap(addedHero => this.log(`added hero w/ id=${addedHero.id}`)), catchError(this.handleError('addHero')));\n  }\n  /** DELETE: delete the hero from the server */\n  deleteHero(hero) {\n    const id = typeof hero === 'number' ? hero : hero.id;\n    const url = `${this.heroesUrl}/${id}`;\n    return this.http.delete(url, httpOptions).pipe(tap(_ => this.log(`deleted hero id=${id}`)), catchError(this.handleError('deleteHero')));\n  }\n  /** PUT: update the hero on the server */\n  updateHero(hero) {\n    return this.http.put(this.heroesUrl, hero, httpOptions).pipe(tap(_ => this.log(`updated hero id=${hero.id}`)), catchError(this.handleError('updateHero')));\n  }\n  /**\r\n   * Returns a function that handles Http operation failures.\r\n   * This error handler lets the app continue to run as if no error occurred.\r\n   *\r\n   * @param operation - name of the operation that failed\r\n   */\n  handleError(operation = 'operation') {\n    return error => {\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      // If a native error is caught, do not transform it. We only want to\n      // transform response errors that are not wrapped in an `Error`.\n      if (error.error instanceof Event) {\n        throw error.error;\n      }\n      const message = `server returned code ${error.status} with body \"${error.error}\"`;\n      // TODO: better job of transforming error for user consumption\n      throw new Error(`${operation} failed: ${message}`);\n    };\n  }\n  log(message) {\n    console.log('HeroService: ' + message);\n  }\n  static #_ = this.ɵfac = function HeroService_Factory(t) {\n    return new (t || HeroService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HeroService,\n    factory: HeroService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","catchError","map","tap","httpOptions","headers","HeroService","constructor","http","heroesUrl","getHeroes","get","pipe","heroes","log","handleError","getHero","id","parseInt","url","h","outcome","addHero","hero","post","addedHero","deleteHero","delete","_","updateHero","put","operation","error","console","Event","message","status","Error","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\leon\\Documents\\project\\angular-app\\angular-sample-app\\src\\app\\model\\hero.service.ts"],"sourcesContent":["import {HttpClient, HttpErrorResponse, HttpHeaders} from '@angular/common/http';\r\nimport {Injectable} from '@angular/core';\r\nimport {Observable} from 'rxjs';\r\nimport {catchError, map, tap} from 'rxjs/operators';\r\n\r\nimport {Hero} from './hero';\r\n\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({'Content-Type': 'application/json'})\r\n};\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class HeroService {\r\n  readonly heroesUrl = 'api/heroes';  // URL to web api\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  /** GET heroes from the server */\r\n  getHeroes(): Observable<Hero[]> {\r\n    return this.http.get<Hero[]>(this.heroesUrl)\r\n               .pipe(\r\n                   tap(heroes => this.log('fetched heroes')),\r\n                   catchError(this.handleError('getHeroes'))) as Observable<Hero[]>;\r\n  }\r\n\r\n  /** GET hero by id. Return `undefined` when id not found */\r\n  getHero<Data>(id: number|string): Observable<Hero> {\r\n    if (typeof id === 'string') {\r\n      id = parseInt(id, 10);\r\n    }\r\n    const url = `${this.heroesUrl}/?id=${id}`;\r\n    return this.http.get<Hero[]>(url).pipe(\r\n        map(heroes => heroes[0]),  // returns a {0|1} element array\r\n        tap(h => {\r\n          const outcome = h ? 'fetched' : 'did not find';\r\n          this.log(`${outcome} hero id=${id}`);\r\n        }),\r\n        catchError(this.handleError<Hero>(`getHero id=${id}`)));\r\n  }\r\n\r\n  //////// Save methods //////////\r\n\r\n  /** POST: add a new hero to the server */\r\n  addHero(hero: Hero): Observable<Hero> {\r\n    return this.http.post<Hero>(this.heroesUrl, hero, httpOptions)\r\n        .pipe(\r\n            tap((addedHero) => this.log(`added hero w/ id=${addedHero.id}`)),\r\n            catchError(this.handleError<Hero>('addHero')));\r\n  }\r\n  /** DELETE: delete the hero from the server */\r\n  deleteHero(hero: Hero|number): Observable<Hero> {\r\n    const id = typeof hero === 'number' ? hero : hero.id;\r\n    const url = `${this.heroesUrl}/${id}`;\r\n\r\n    return this.http.delete<Hero>(url, httpOptions)\r\n        .pipe(\r\n            tap(_ => this.log(`deleted hero id=${id}`)),\r\n            catchError(this.handleError<Hero>('deleteHero')));\r\n  }\r\n\r\n  /** PUT: update the hero on the server */\r\n  updateHero(hero: Hero): Observable<any> {\r\n    return this.http.put(this.heroesUrl, hero, httpOptions)\r\n        .pipe(\r\n            tap(_ => this.log(`updated hero id=${hero.id}`)),\r\n            catchError(this.handleError<any>('updateHero')));\r\n  }\r\n  /**\r\n   * Returns a function that handles Http operation failures.\r\n   * This error handler lets the app continue to run as if no error occurred.\r\n   *\r\n   * @param operation - name of the operation that failed\r\n   */\r\n  private handleError<T>(operation = 'operation') {\r\n    return (error: HttpErrorResponse): Observable<T> => {\r\n      // TODO: send the error to remote logging infrastructure\r\n      console.error(error);  // log to console instead\r\n\r\n      // If a native error is caught, do not transform it. We only want to\r\n      // transform response errors that are not wrapped in an `Error`.\r\n      if (error.error instanceof Event) {\r\n        throw error.error;\r\n      }\r\n\r\n      const message = `server returned code ${error.status} with body \"${error.error}\"`;\r\n      // TODO: better job of transforming error for user consumption\r\n      throw new Error(`${operation} failed: ${message}`);\r\n    };\r\n  }\r\n\r\n  private log(message: string) {\r\n    console.log('HeroService: ' + message);\r\n  }\r\n}\r\n\r\n\r\n/*\r\nCopyright Google LLC. All Rights Reserved.\r\nUse of this source code is governed by an MIT-style license that\r\ncan be found in the LICENSE file at https://angular.io/license\r\n*/"],"mappings":"AAAA,SAAuCA,WAAW,QAAO,sBAAsB;AAG/E,SAAQC,UAAU,EAAEC,GAAG,EAAEC,GAAG,QAAO,gBAAgB;;;AAInD,MAAMC,WAAW,GAAG;EAClBC,OAAO,EAAE,IAAIL,WAAW,CAAC;IAAC,cAAc,EAAE;EAAkB,CAAC;CAC9D;AAGD,OAAM,MAAOM,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFf,KAAAC,SAAS,GAAG,YAAY,CAAC,CAAE;EAEG;EAEvC;EACAC,SAASA,CAAA;IACP,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAS,IAAI,CAACF,SAAS,CAAC,CAChCG,IAAI,CACDT,GAAG,CAACU,MAAM,IAAI,IAAI,CAACC,GAAG,CAAC,gBAAgB,CAAC,CAAC,EACzCb,UAAU,CAAC,IAAI,CAACc,WAAW,CAAC,WAAW,CAAC,CAAC,CAAuB;EACjF;EAEA;EACAC,OAAOA,CAAOC,EAAiB;IAC7B,IAAI,OAAOA,EAAE,KAAK,QAAQ,EAAE;MAC1BA,EAAE,GAAGC,QAAQ,CAACD,EAAE,EAAE,EAAE,CAAC;;IAEvB,MAAME,GAAG,GAAG,GAAG,IAAI,CAACV,SAAS,QAAQQ,EAAE,EAAE;IACzC,OAAO,IAAI,CAACT,IAAI,CAACG,GAAG,CAASQ,GAAG,CAAC,CAACP,IAAI,CAClCV,GAAG,CAACW,MAAM,IAAIA,MAAM,CAAC,CAAC,CAAC,CAAC;IAAG;IAC3BV,GAAG,CAACiB,CAAC,IAAG;MACN,MAAMC,OAAO,GAAGD,CAAC,GAAG,SAAS,GAAG,cAAc;MAC9C,IAAI,CAACN,GAAG,CAAC,GAAGO,OAAO,YAAYJ,EAAE,EAAE,CAAC;IACtC,CAAC,CAAC,EACFhB,UAAU,CAAC,IAAI,CAACc,WAAW,CAAO,cAAcE,EAAE,EAAE,CAAC,CAAC,CAAC;EAC7D;EAEA;EAEA;EACAK,OAAOA,CAACC,IAAU;IAChB,OAAO,IAAI,CAACf,IAAI,CAACgB,IAAI,CAAO,IAAI,CAACf,SAAS,EAAEc,IAAI,EAAEnB,WAAW,CAAC,CACzDQ,IAAI,CACDT,GAAG,CAAEsB,SAAS,IAAK,IAAI,CAACX,GAAG,CAAC,oBAAoBW,SAAS,CAACR,EAAE,EAAE,CAAC,CAAC,EAChEhB,UAAU,CAAC,IAAI,CAACc,WAAW,CAAO,SAAS,CAAC,CAAC,CAAC;EACxD;EACA;EACAW,UAAUA,CAACH,IAAiB;IAC1B,MAAMN,EAAE,GAAG,OAAOM,IAAI,KAAK,QAAQ,GAAGA,IAAI,GAAGA,IAAI,CAACN,EAAE;IACpD,MAAME,GAAG,GAAG,GAAG,IAAI,CAACV,SAAS,IAAIQ,EAAE,EAAE;IAErC,OAAO,IAAI,CAACT,IAAI,CAACmB,MAAM,CAAOR,GAAG,EAAEf,WAAW,CAAC,CAC1CQ,IAAI,CACDT,GAAG,CAACyB,CAAC,IAAI,IAAI,CAACd,GAAG,CAAC,mBAAmBG,EAAE,EAAE,CAAC,CAAC,EAC3ChB,UAAU,CAAC,IAAI,CAACc,WAAW,CAAO,YAAY,CAAC,CAAC,CAAC;EAC3D;EAEA;EACAc,UAAUA,CAACN,IAAU;IACnB,OAAO,IAAI,CAACf,IAAI,CAACsB,GAAG,CAAC,IAAI,CAACrB,SAAS,EAAEc,IAAI,EAAEnB,WAAW,CAAC,CAClDQ,IAAI,CACDT,GAAG,CAACyB,CAAC,IAAI,IAAI,CAACd,GAAG,CAAC,mBAAmBS,IAAI,CAACN,EAAE,EAAE,CAAC,CAAC,EAChDhB,UAAU,CAAC,IAAI,CAACc,WAAW,CAAM,YAAY,CAAC,CAAC,CAAC;EAC1D;EACA;;;;;;EAMQA,WAAWA,CAAIgB,SAAS,GAAG,WAAW;IAC5C,OAAQC,KAAwB,IAAmB;MACjD;MACAC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC,CAAE;MAEvB;MACA;MACA,IAAIA,KAAK,CAACA,KAAK,YAAYE,KAAK,EAAE;QAChC,MAAMF,KAAK,CAACA,KAAK;;MAGnB,MAAMG,OAAO,GAAG,wBAAwBH,KAAK,CAACI,MAAM,eAAeJ,KAAK,CAACA,KAAK,GAAG;MACjF;MACA,MAAM,IAAIK,KAAK,CAAC,GAAGN,SAAS,YAAYI,OAAO,EAAE,CAAC;IACpD,CAAC;EACH;EAEQrB,GAAGA,CAACqB,OAAe;IACzBF,OAAO,CAACnB,GAAG,CAAC,eAAe,GAAGqB,OAAO,CAAC;EACxC;EAAC,QAAAP,CAAA,G;qBAhFUtB,WAAW,EAAAgC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXpC,WAAW;IAAAqC,OAAA,EAAXrC,WAAW,CAAAsC,IAAA;IAAAC,UAAA,EADC;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}