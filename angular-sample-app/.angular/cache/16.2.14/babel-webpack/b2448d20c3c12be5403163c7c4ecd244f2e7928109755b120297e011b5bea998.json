{"ast":null,"code":"// Import patch to make async `HTMLCanvasElement` methods (such as `.toBlob()`) Zone.js-aware.\n// Either import in `polyfills.ts` (if used in more than one places in the app) or in the component\n// file using `HTMLCanvasElement` (if it is only used in a single file).\nimport 'zone.js/plugins/zone-patch-canvas';\nimport * as i0 from \"@angular/core\";\nconst _c0 = [\"sampleCanvas\"];\nexport class CanvasComponent {\n  constructor() {\n    this.blobSize = 0;\n  }\n  ngAfterViewInit() {\n    const canvas = this.sampleCanvas.nativeElement;\n    const context = canvas.getContext('2d');\n    context.clearRect(0, 0, 200, 200);\n    context.fillStyle = '#FF1122';\n    context.fillRect(0, 0, 200, 200);\n    canvas.toBlob(blob => {\n      this.blobSize = blob?.size ?? 0;\n    });\n  }\n  static #_ = this.ɵfac = function CanvasComponent_Factory(t) {\n    return new (t || CanvasComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CanvasComponent,\n    selectors: [[\"sample-canvas\"]],\n    viewQuery: function CanvasComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.sampleCanvas = _t.first);\n      }\n    },\n    decls: 2,\n    vars: 0,\n    consts: [[\"width\", \"200\", \"height\", \"200\"], [\"sampleCanvas\", \"\"]],\n    template: function CanvasComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"canvas\", 0, 1);\n      }\n    },\n    encapsulation: 2\n  });\n}","map":{"version":3,"names":["CanvasComponent","constructor","blobSize","ngAfterViewInit","canvas","sampleCanvas","nativeElement","context","getContext","clearRect","fillStyle","fillRect","toBlob","blob","size","_","_2","selectors","viewQuery","CanvasComponent_Query","rf","ctx","i0","ɵɵelement"],"sources":["C:\\Users\\leon\\Documents\\project\\angular-app\\angular-sample-app\\src\\app\\shared\\canvas.component.ts"],"sourcesContent":["// Import patch to make async `HTMLCanvasElement` methods (such as `.toBlob()`) Zone.js-aware.\r\n// Either import in `polyfills.ts` (if used in more than one places in the app) or in the component\r\n// file using `HTMLCanvasElement` (if it is only used in a single file).\r\nimport 'zone.js/plugins/zone-patch-canvas';\r\nimport { Component, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'sample-canvas',\r\n  template: '<canvas #sampleCanvas width=\"200\" height=\"200\"></canvas>',\r\n})\r\nexport class CanvasComponent implements AfterViewInit {\r\n  blobSize = 0;\r\n  @ViewChild('sampleCanvas') sampleCanvas!: ElementRef;\r\n\r\n  ngAfterViewInit() {\r\n    const canvas: HTMLCanvasElement = this.sampleCanvas.nativeElement;\r\n    const context = canvas.getContext('2d')!;\r\n\r\n    context.clearRect(0, 0, 200, 200);\r\n    context.fillStyle = '#FF1122';\r\n    context.fillRect(0, 0, 200, 200);\r\n\r\n    canvas.toBlob(blob => {\r\n      this.blobSize = blob?.size ?? 0;\r\n    });\r\n  }\r\n}\r\n\r\n\r\n/*\r\nCopyright Google LLC. All Rights Reserved.\r\nUse of this source code is governed by an MIT-style license that\r\ncan be found in the LICENSE file at https://angular.io/license\r\n*/"],"mappings":"AAAA;AACA;AACA;AACA,OAAO,mCAAmC;;;AAO1C,OAAM,MAAOA,eAAe;EAJ5BC,YAAA;IAKE,KAAAC,QAAQ,GAAG,CAAC;;EAGZC,eAAeA,CAAA;IACb,MAAMC,MAAM,GAAsB,IAAI,CAACC,YAAY,CAACC,aAAa;IACjE,MAAMC,OAAO,GAAGH,MAAM,CAACI,UAAU,CAAC,IAAI,CAAE;IAExCD,OAAO,CAACE,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC;IACjCF,OAAO,CAACG,SAAS,GAAG,SAAS;IAC7BH,OAAO,CAACI,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC;IAEhCP,MAAM,CAACQ,MAAM,CAACC,IAAI,IAAG;MACnB,IAAI,CAACX,QAAQ,GAAGW,IAAI,EAAEC,IAAI,IAAI,CAAC;IACjC,CAAC,CAAC;EACJ;EAAC,QAAAC,CAAA,G;qBAfUf,eAAe;EAAA;EAAA,QAAAgB,EAAA,G;UAAfhB,eAAe;IAAAiB,SAAA;IAAAC,SAAA,WAAAC,sBAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;;;;;;;;;;;;;QAFfE,EAAA,CAAAC,SAAA,mBAAwD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}