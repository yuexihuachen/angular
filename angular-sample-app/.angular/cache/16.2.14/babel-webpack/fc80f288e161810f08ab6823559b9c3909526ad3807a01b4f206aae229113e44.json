{"ast":null,"code":"import { Observable, of, throwError } from 'rxjs';\nimport { concat, map, retryWhen, switchMap, take } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TwainService {\n  constructor(http) {\n    this.http = http;\n    this.nextId = 1;\n  }\n  getQuote() {\n    return Observable.create(observer => observer.next(this.nextId++)).pipe(\n    // tap((id: number) => console.log(id)),\n    // tap((id: number) => { throw new Error('Simulated server error'); }),\n    switchMap(id => this.http.get(`api/quotes/${id}`)),\n    // tap((q : Quote) => console.log(q)),\n    map(q => q.quote),\n    // `errors` is observable of http.get errors\n    retryWhen(errors => errors.pipe(switchMap(error => {\n      if (error.status === 404) {\n        // Queried for quote that doesn't exist.\n        this.nextId = 1; // retry with quote id:1\n        return of(null); // signal OK to retry\n      }\n      // Some other HTTP error.\n      console.error(error);\n      return throwError('Cannot get Twain quotes from the server');\n    }), take(2),\n    // If a second retry value, then didn't find id:1 and triggers the following error\n    concat(throwError('There are no Twain quotes')) // didn't find id:1\n    )));\n  }\n  static #_ = this.ɵfac = function TwainService_Factory(t) {\n    return new (t || TwainService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TwainService,\n    factory: TwainService.ɵfac\n  });\n}","map":{"version":3,"names":["Observable","of","throwError","concat","map","retryWhen","switchMap","take","TwainService","constructor","http","nextId","getQuote","create","observer","next","pipe","id","get","q","quote","errors","error","status","console","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac"],"sources":["C:\\Users\\leon\\Documents\\project\\angular-app\\angular-sample-app\\src\\app\\twain\\twain.service.ts"],"sourcesContent":["// Mark Twain Quote service gets quotes from server\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\n\r\nimport { Observable, of, throwError, Observer } from 'rxjs';\r\nimport { concat, map, retryWhen, switchMap, take, tap } from 'rxjs/operators';\r\n\r\nimport { Quote } from './quote';\r\n\r\n@Injectable()\r\nexport class TwainService {\r\n  constructor(private http: HttpClient) { }\r\n\r\n  private nextId = 1;\r\n\r\n  getQuote(): Observable<string> {\r\n    return Observable.create((observer: Observer<number>) => observer.next(this.nextId++)).pipe(\r\n\r\n      // tap((id: number) => console.log(id)),\r\n      // tap((id: number) => { throw new Error('Simulated server error'); }),\r\n\r\n      switchMap((id: number) => this.http.get<Quote>(`api/quotes/${id}`)),\r\n      // tap((q : Quote) => console.log(q)),\r\n      map((q: Quote) => q.quote),\r\n\r\n      // `errors` is observable of http.get errors\r\n      retryWhen(errors => errors.pipe(\r\n        switchMap((error: HttpErrorResponse)  => {\r\n          if (error.status === 404) {\r\n            // Queried for quote that doesn't exist.\r\n            this.nextId = 1; // retry with quote id:1\r\n            return of(null); // signal OK to retry\r\n          }\r\n          // Some other HTTP error.\r\n          console.error(error);\r\n          return throwError('Cannot get Twain quotes from the server');\r\n        }),\r\n        take(2),\r\n        // If a second retry value, then didn't find id:1 and triggers the following error\r\n        concat(throwError('There are no Twain quotes')) // didn't find id:1\r\n      ))\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n/*\r\nCopyright Google LLC. All Rights Reserved.\r\nUse of this source code is governed by an MIT-style license that\r\ncan be found in the LICENSE file at https://angular.io/license\r\n*/"],"mappings":"AAIA,SAASA,UAAU,EAAEC,EAAE,EAAEC,UAAU,QAAkB,MAAM;AAC3D,SAASC,MAAM,EAAEC,GAAG,EAAEC,SAAS,EAAEC,SAAS,EAAEC,IAAI,QAAa,gBAAgB;;;AAK7E,OAAM,MAAOC,YAAY;EACvBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAEhB,KAAAC,MAAM,GAAG,CAAC;EAFsB;EAIxCC,QAAQA,CAAA;IACN,OAAOZ,UAAU,CAACa,MAAM,CAAEC,QAA0B,IAAKA,QAAQ,CAACC,IAAI,CAAC,IAAI,CAACJ,MAAM,EAAE,CAAC,CAAC,CAACK,IAAI;IAEzF;IACA;IAEAV,SAAS,CAAEW,EAAU,IAAK,IAAI,CAACP,IAAI,CAACQ,GAAG,CAAQ,cAAcD,EAAE,EAAE,CAAC,CAAC;IACnE;IACAb,GAAG,CAAEe,CAAQ,IAAKA,CAAC,CAACC,KAAK,CAAC;IAE1B;IACAf,SAAS,CAACgB,MAAM,IAAIA,MAAM,CAACL,IAAI,CAC7BV,SAAS,CAAEgB,KAAwB,IAAK;MACtC,IAAIA,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;QACxB;QACA,IAAI,CAACZ,MAAM,GAAG,CAAC,CAAC,CAAC;QACjB,OAAOV,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;;MAEnB;MACAuB,OAAO,CAACF,KAAK,CAACA,KAAK,CAAC;MACpB,OAAOpB,UAAU,CAAC,yCAAyC,CAAC;IAC9D,CAAC,CAAC,EACFK,IAAI,CAAC,CAAC,CAAC;IACP;IACAJ,MAAM,CAACD,UAAU,CAAC,2BAA2B,CAAC,CAAC,CAAC;KACjD,CAAC,CACH;EACH;EAAC,QAAAuB,CAAA,G;qBAhCUjB,YAAY,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAZtB,YAAY;IAAAuB,OAAA,EAAZvB,YAAY,CAAAwB;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}